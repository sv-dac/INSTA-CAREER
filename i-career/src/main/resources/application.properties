#spring.config.import=optional:file:.env

#server.port=80
server.servlet.context-path=/icareer
spring.application.name=Insta Career

# MySQL database configuration
#spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/instacareer?useSSL=false&serverTimezone=UTC}
#spring.datasource.url=jdbc:mysql://localhost:3306/instacareer?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME:root}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:root}
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

# DB properties :- 
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.url=jdbc:h2:file:/data/demo
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.h2.console.enabled=true
#spring.jpa.hibernate.ddl-auto=update
#
#spring.h2.console.settings.web-allow-others=true

#debug=true

# Kafka Bootstrap Servers (where your Kafka broker is running)
#spring.kafka.bootstrap-servers=localhost:9092

# Consumer Properties
#spring.kafka.consumer.group-id=my-spring-boot-group
#spring.kafka.consumer.group-id=user-group
# or latest, none
#spring.kafka.consumer.auto-offset-reset=earliest 
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Producer Properties
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#If you're dealing with JSON objects, you'll often use 
#org.springframework.kafka.support.serializer.JsonSerializer 
#and org.springframework.kafka.support.serializer.JsonDeserializer 
#for value-serializer and value-deserializer, respectively. In this case, you might also need to configure trusted packages:
#spring.kafka.consumer.properties.spring.json.trusted.packages=*

#spring.kafka.consumer.properties.spring.json.value.default.type=com.icareer.dto.UserProfileKafkaPayload

#File Uploader properties
#spring.servlet.multipart.max-file-size=10000000
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10000000


# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=user-group
spring.kafka.consumer.auto-offset-reset=earliest

# Deserializers
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# JSON deserialization
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.value.default.type=com.icareer.dto.UserProfileKafkaPayload

# Producer (no change needed unless you're producing JSON)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# JWT secret key 
jwt.secret.key=${JWT_SECRET_KEY}
# expiration time 1 hour in milliseconds 
jwt.token.expiration=3600000